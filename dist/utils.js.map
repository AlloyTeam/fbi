{"version":3,"sources":["../src/utils.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;wEAiDO,iBAAsB,GAAtB;AAAA,QACD,GADC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACW,IAAI,KAAJ,CAAU,GAAV,CADX;;AAAA;AACD,eADC;AAAA,6CAEE,MAAM,QAAQ,EAAE,GAAF,CAAM,GAAN,CAAR,CAAN,GAA4B,GAF9B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAe,K;;;;;QA9CN,G,GAAA,G;QAgCA,K,GAAA,K;;AAnChB;;;;AACA;;;;;;AAEO,SAAS,GAAT,CAAc,GAAd,EAAmB;AACxB,UAAQ,GAAR,CAAY,GAAZ;AACD;;AAEM,IAAM,gBAAI;AACf,OAAK,eAAa;AAAA,sCAAT,IAAS;AAAT,UAAS;AAAA;;AAChB,QAAM,MAAM,GAAG,KAAH,CAAS,IAAT,CAAc,QAAQ,EAAtB,CAAZ;AACA,WAAO,eAAK,IAAL,CAAU,KAAV,CAAgB,IAAhB,EAAsB,CAAC,QAAQ,GAAR,EAAD,EAAgB,MAAhB,CAAuB,GAAvB,CAAtB,CAAP;AACD,GAJc;;AAMf,QAAM,gBAAa;AAAA,uCAAT,IAAS;AAAT,UAAS;AAAA;;AACjB,QAAM,MAAM,GAAG,KAAH,CAAS,IAAT,CAAc,QAAQ,EAAtB,CAAZ;AACA,WAAO,eAAK,IAAL,CAAU,KAAV,CAAgB,IAAhB,EAAsB,GAAtB,CAAP;AACD,GATc;;AAWf,OAAK,eAAa;AAAA,uCAAT,IAAS;AAAT,UAAS;AAAA;;AAChB,YAAQ,GAAR,CAAY,gBAAgB,SAA5B;AACA,QAAM,MAAM,GAAG,KAAH,CAAS,IAAT,CAAc,QAAQ,EAAtB,CAAZ;AACA,WAAO,eAAK,IAAL,CAAU,KAAV,CAAgB,IAAhB,EAAsB,CAAC,SAAD,EAAY,MAAZ,CAAmB,GAAnB,CAAtB,CAAP;AACD;AAfc,CAAV;;AAkBA,IAAM,oBAAM;AACjB,SAAO,oBAAO;AACZ,WAAO,sBAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,mBAAG,MAAH,CAAU,EAAE,GAAF,CAAM,GAAN,CAAV,EAAsB,aAAG,IAAH,GAAU,aAAG,IAAnC,EAAyC,eAAO;AAC9C,eAAO,MAAM,QAAQ,KAAR,CAAN,GAAuB,QAAQ,IAAR,CAA9B;AACD,OAFD;AAGD,KAJM,CAAP;AAKD;AAPgB,CAAZ;;AAUA,SAAS,KAAT,CAAe,MAAf,EAAuB;AAC5B,MAAI,UAAU,GAAG,KAAH,CAAS,IAAT,CAAc,SAAd,EAAyB,CAAzB,CAAd;AACA,UAAQ,OAAR,CAAgB,UAAS,MAAT,EAAiB;AAC/B,SAAK,IAAI,CAAT,IAAc,MAAd;AACE,UAAI,sBAAO,OAAO,CAAP,CAAP,MAAqB,QAAzB,EAAmC;AACjC,eAAO,CAAP,IAAY,OAAO,CAAP,MAAc,MAAM,OAAN,CAAc,OAAO,CAAP,CAAd,IAA2B,EAA3B,GAAgC,EAA9C,CAAZ;AACA,cAAM,OAAO,CAAP,CAAN,EAAiB,OAAO,CAAP,CAAjB;AACD,OAHD,MAGO;AACL,eAAO,CAAP,IAAY,OAAO,CAAP,CAAZ;AACD;AANH;AAOD,GARD;AASA,SAAO,MAAP;AACD","file":"utils.js","sourcesContent":["import fs from 'fs'\nimport path from 'path'\n\nexport function log (msg) {\n  console.log(msg)\n}\n\nexport const _ = {\n  cwd: (...args) => {\n    const arr = [].slice.call(args || [])\n    return path.join.apply(null, [process.cwd()].concat(arr))\n  },\n\n  join: (...args) => {\n    const arr = [].slice.call(args || [])\n    return path.join.apply(null, arr)\n  },\n\n  dir: (...args) => {\n    console.log('__dirname: ' + __dirname)\n    const arr = [].slice.call(args || [])\n    return path.join.apply(null, [__dirname].concat(arr))\n  }\n}\n\nexport const fsp = {\n  exist: src => {\n    return new Promise((resolve, reject) => {\n      fs.access(_.cwd(src), fs.R_OK | fs.W_OK, err => {\n        return err ? resolve(false) : resolve(true)\n      })\n    })\n  }\n}\n\nexport function merge(target) {\n  var sources = [].slice.call(arguments, 1)\n  sources.forEach(function(source) {\n    for (var p in source)\n      if (typeof source[p] === 'object') {\n        target[p] = target[p] || (Array.isArray(source[p]) ? [] : {})\n        merge(target[p], source[p])\n      } else {\n        target[p] = source[p]\n      }\n  })\n  return target\n}\n\nexport async function isfbi (src) {\n  let ret = await fsp.exist(src)\n  return ret ? require(_.cwd(src)) : ret\n}\n"]}