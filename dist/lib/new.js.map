{"version":3,"sources":["../../src/lib/new.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;AACA;;;;;;AAEA,SAAS,iBAAT,GAA6B;AAC3B,SAAO,sBAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,uBAAS,MAAT,CAAgB;AACd,YAAM,MADQ;AAEd,YAAM,QAFQ;AAGd,eAAS,QAHK;AAId,eAAS,CAAC,mBAAD,EAAsB,cAAtB;AAJK,KAAhB,EAKG,IALH,CAKQ,eAAO;AACb,UAAI,IAAI,MAAJ,KAAe,mBAAnB,EAAwC;AAAE;AACxC,2BAAS,MAAT,CAAgB;AACd,gBAAM,MADQ;AAEd,gBAAM,MAFQ;AAGd,mBAAS,YAHK;AAId,mBAAS,CAAC,oBAAD,EAAuB,wBAAvB,EAAiD,kBAAjD,EAAqE,oBAArE,EAA2F,sBAA3F;AAJK,SAAhB,EAKG,IALH,CAKQ,eAAO;AACb,kBAAQ,GAAR;AACD,SAPD;AAQD,OATD,MASO;AAAE;AACP,2BAAS,MAAT,CAAgB;AACd,gBAAM,OADQ;AAEd,gBAAM,KAFQ;AAGd,mBAAS;AAHK,SAAhB,EAIG,IAJH,CAIQ,eAAO;AACb,kBAAQ,GAAR;AACD,SAND;AAOD;AACF,KAxBD;AAyBD,GA1BM,CAAP;AA2BD;;AAED,SAAS,kBAAT,GAA8B;AAC5B,SAAO,sBAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,uBAAS,MAAT,CAAgB;AACd,YAAM,SADQ;AAEd,YAAM,WAFQ;AAGd,eAAS,KAHK;AAId,eAAS;AAJK,KAAhB,EAKG,IALH,CAKQ,eAAO;AACb,cAAQ,GAAR;AACD,KAPD;AAQD,GATM,CAAP;AAUD;;;wEAGc,iBAAO,IAAP;AAAA,QAGT,IAHS,EAQL,EARK;AAAA;AAAA;AAAA;AAAA;AACb,gDAAW,IAAX;;AADa;AAAA,mBAGI,mBAHJ;;AAAA;AAGT,gBAHS;;AAIb,4BAAI,IAAJ;;AAJa,iBAMT,KAAK,IANI;AAAA;AAAA;AAAA;;AAAA,iBAOR,IAPQ;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAQM,oBARN;;AAAA;AAQL,cARK;;AAST,4BAAI,EAAJ;;AATS;AAAA;AAAA;;AAAA;AAWN,gBAAI,KAAK,GAAT,EAAc,CAEpB;;AAbY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","file":"new.js","sourcesContent":["import inquirer from 'inquirer'\nimport { log, merge } from '../utils'\nimport cfg from '../config'\n\nfunction templateQuestions() {\n  return new Promise((resolve, reject) => {\n    inquirer.prompt({\n      type: 'list',\n      name: 'action',\n      message: 'choose',\n      choices: ['select a template', 'new template']\n    }).then(ans => {\n      if (ans.action === 'select a template') { // select\n        inquirer.prompt({\n          type: 'list',\n          name: 'tmpl',\n          message: 'choose one',\n          choices: ['fbi-template-h5-pc', 'fbi-template-h5-mobile', 'fbi-template-vue', 'fbi-template-react', 'fbi-template-angular']\n        }).then(ret => {\n          resolve(ret)\n        })\n      } else { // new\n        inquirer.prompt({\n          type: 'input',\n          name: 'url',\n          message: 'where is the template?'\n        }).then(ret => {\n          resolve(ret)\n        })\n      }\n    })\n  })\n}\n\nfunction overwriteQuestions() {\n  return new Promise((resolve, reject) => {\n    inquirer.prompt({\n      type: 'confirm',\n      name: 'overwrite',\n      default: false,\n      message: 'Current folder is a fbi project, do you want overwrite it?'\n    }).then(ans => {\n      resolve(ans)\n    })\n  })\n}\n\n\nexport default async (ucfg) => {\n  merge(cfg, ucfg)\n\n  let data = await templateQuestions()\n  log(data)\n\n  if (data.tmpl) {\n    if(ucfg){\n      let ow = await overwriteQuestions()\n      log(ow)\n    }\n  } else if (data.url) {\n\n  }\n\n}\n\n"]}